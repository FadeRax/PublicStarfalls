--@name EaseLib
--@author FadeRax
--@shared


-- Credit for all of these functions: Andrey Sitnik and Ivan Solovev at https://easings.net/
-- I merely just took these functions and put them in a Starfall.
-- If there's any functions that don't work like they're supposed to let me know on Discord @FadeRax64#1322

-- The 'x' variable represents the progression in the function; 0 = beginning, 1 = end.


local PI = math.pi
ease = {}


----> Sine

function ease.inSine(x)
    return 1 - math.cos((x * PI))
end

function ease.outSine(x)
    return math.sin((x * PI) / 2)
end

function ease.inOutSine(x)
    return -(math.cos(PI * x) - 1) / 2
end


----> Quad

function ease.inQuad(x)
    return x * x
end

function ease.outQuad(x)
    return 1 - (1 - x) * (1 - x)
end

function ease.inOutQuad(x)
    return (x < 0.5) and (2 * x * x) or (1 - math.pow(-2 * x + 2, 2) / 2)
end


----> Cubic

function ease.inCubic(x)
    return x * x * x
end

function ease.outCubic(x)
    return 1 - math.pow(1 - x, 3)
end

function ease.inOutCubic(x)
    return (x < 0.5) and (4 * x * x * x) or (1 - math.pow(-2 * x + 2, 3) / 2)
end


----> Quart

function ease.inQuart(x)
    return x * x * x * x
end

function ease.outQuart(x)
    return 1 - math.pow(1 - x, 4)
end

function ease.inOutQuart(x)
    return (x < 0.5) and (8 * x * x * x * x) or (1 - math.pow(-2 * x + 2, 4) / 2)
end


----> Quint

function ease.inQuint(x)
    return x * x * x * x * x
end

function ease.inQuint(x)
    return 1 - math.pow(1 - x, 5)
end

function ease.inQuint(x)
    return (x < 0.5) and (16 * x * x * x * x * x) or (1 - math.pow(-2 * x + 2, 5) / 2)
end


----> Expo (Exponential)

function ease.inExpo(x)
    return (x == 0) and 0 or math.pow(2, 10 * x - 10)
end

function ease.outExpo(x)
    return (x == 1) and 1 or 1 - math.pow(2, -10 * x)
end

function ease.inOutExpo(x)
    return (x == 0) and 0 or (x == 1) and 1 or (x > 0.5) and (math.pow(2, 20 * x - 10) / 2) or ((2 - math.pow(2, -20 * x + 10)) / 2)
end


----> Circ (Circular)

function ease.inCirc(x)
    return 1 - math.sqrt(1 - math.pow(x, 2))
end

function ease.outCirc(x)
    return sqrt(1 - math.pow(x - 1, 2))
end

function ease.inOutCirc(x)
    return (x < 0.5) and ((1- math.sqrt(1 - math.pow(2 * x, 2))) / 2) or ((math.sqrt(1 - math.pow(-2 * x + 2, 2)) + 1) / 2)
end


----> Back

function ease.inBack(x)
    local c1 = 1.70158
    local c3 = c1 + 1
    return c3 * x * x * x - c1 * x * x
end

function ease.outBack(x)
    local c1 = 1.70158
    local c3 = c1 + 1
    return 1 + c3 * math.pow(x - 1, 3) + c1 * math.pow(x - 1, 2)
end

function ease.inOutBack(x)
    local c1 = 1.70158
    local c3 = c1 + 1
    return (x < 0.5) and ((math.pow(2 * x, 2) * ((c2 + 1) * 2 * x - c2)) / 2) or ((math.pow(2 * x - 2, 2) * ((c2 + 1) * (x * 2 - 2) + c2) + 2) / 2)
end


----> Elastic

function ease.inElastic(x)
    local c4 = (2 * PI) / 3
    return (x == 0) and 0 or (x == 1) and 1 or (-math.pow(2, 10 * x - 10) * math.sin((x * 10 - 10.75) * c4))
end

function ease.outElastic(x)
    local c4 = (2 * PI) / 3    
    return (x == 0) and 0 or (x == 1) and 1 or (math.pow(2, -10 * x) * math.sin((x * 10 - 0.75) * c4) + 1)
end

function ease.inOutElastic(x)
    local c5 = (2 * PI) / 4.5
    return (x == 0) and 0 or (x == 1) and 1 or (x < 0.5) and (-(math.pow(2, 20 * x -10) * math.sin((20 * x - 11.125) * c5)) / 2) or ((math.pow(2, -20 * x + 10) * math.sin((20 * x - 11.125) * c5)) / 2 + 1)
end


----> BOUNCY!!!

function ease.outBounce(x)
    local n1 = 7.5625
    local d1 = 2.75
    
    if x < 1 / d1 then
        return n1 * x * x
    elseif x < 2 / d1 then
        return n1 * (x - 1.5 / d1) * x + 0.75
    elseif x < 2.5 / d1 then
        return n1 * (x - 2.25 / d1) * x + 0.9375
    else
        return n1 * (x - 2.625 / d1) * x + 0.984375
    end
end

function ease.inBounce(x)
    return 1 - ease.outBounce(1 - x)
end

function ease.inOutBounce(x)
    return (x < 0.5) and ((1 - ease.outBounce(1 - 2 * x)) / 2) or ((1 + ease.outBounce(2 * x - 1)) / 2)
end